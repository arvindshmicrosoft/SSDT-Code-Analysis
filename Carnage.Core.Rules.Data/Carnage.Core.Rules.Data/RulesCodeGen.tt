<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ Assembly Name="System.Xml.Linq.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>


<#@ Assembly Name="$(SolutionDir)Carnage.Core.Rules.Data\bin\debug\Carnage.Core.Rules.Data.dll" #>


<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="System.Reflection" #>
<#@ import namespace="Carnage.Core.Rules.Data" #>
<#
    var names = new List<string> { "one", "two"}; 
    foreach(var name in GetFileNames())
    {
#>
namespace Carnage.Core.Rules.Data.Rules
{
    using System.Collections.Generic;
    using Carnage.Core.Rules.Data.Attributes;
    using Carnage.Core.Rules.Data.Visitors;
    using Microsoft.SqlServer.Dac.CodeAnalysis;
    using Microsoft.SqlServer.Dac.Model;
    using Microsoft.SqlServer.TransactSql.ScriptDom;

    /* If the name is Funky, please change it in RuleIdentities NOT HERE */
    [LocalizedExportCodeAnalysisRule("RuleIdentities.<#= name#>",
    Constants.ResourceBaseName,
    <#= name#>RuleName,
    <#= name#>ProblemDescription,
    Category = Constants.Design,
    RuleScope = SqlRuleScope.Element)]
    internal sealed class <#= name#>Rule : CarnageSqlCodeAnalysisRule
    {
        private const string <#= name#>ProblemDescription = "<#= name#>_ProblemDescription";
        private const string <#= name#>RuleName = "<#= name#>_RuleName";

        protected override IList<SqlRuleProblem> ElicitProblems(TSqlFragment fragment, RuleDescriptor ruleDescriptor, string elementName, TSqlObject modelElement)
        {
            var visitor = new <#= name#>Visitor();
            fragment.Accept(visitor);
            return this.CreateProblemsAsWarning(ruleDescriptor, elementName, modelElement, visitor.ErroneousFragments);
        }
    }
}

<#
    }
#>
<#+

   List<string> GetFileNames()
  {

     var names = new List<string>();

      var assembly = typeof(RuleIdentities).Assembly;
      var type = assembly.GetType("Carnage.Core.Rules.Data.RuleIdentities");   
     

    
      var members = type.GetMembers(BindingFlags.Public | BindingFlags.Static | BindingFlags.Default | BindingFlags.Instance);


            foreach (var member in members)
          {
                if (member.MemberType == MemberTypes.Field)
             {
                     names.Add(member.Name);
                     // create the rule
                     // create the visitor 

                }
           }

            return names;

  }


  
#>





